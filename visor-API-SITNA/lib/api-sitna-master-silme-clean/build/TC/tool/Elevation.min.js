TC.tool=TC.tool||{};TC.tool.Elevation=function(e){this.options=e||{};this.url=this.options.url||"//idena.navarra.es/ogc/wps";this.process=this.options.process||"gs:ExtractRasterPoints";this.minimumElevation=this.options.minimumElevation||-9998};!function(){const e=TC.tool.Elevation.prototype;e.getElevation=function(e){const t=this;void 0===(e=e||{}).resolution&&(e.resolution=t.options.resolution);void 0===e.sampleNumber&&(e.sampleNumber=t.options.sampleNumber);const o=$.Deferred();TC.loadJS(!TC.Geometry,TC.apiLocation+"TC/Geometry",function(){t.request(e).then(function(n){o.resolve((e.responseCallback||t.parseResponse).call(t,n))},function(e){o.reject(e)})});return o.promise()};e.request=function(e){const t=this;e=e||{};const o=$.Deferred();e.coordinates?TC.loadJS(!TC.format||!TC.format.WPS,TC.apiLocation+"TC/format/WPS",function(){const n={coordinates:e.coordinates};var s;switch(!0){case TC.Geometry.isPoint(e.coordinates):n.type=TC.Consts.geom.POINT;s=[[e.coordinates]];break;case TC.Geometry.isRing(e.coordinates):n.type=TC.Consts.geom.POLYLINE;s=[e.coordinates];break;case TC.Geometry.isRingCollection(e.coordinates):n.type=TC.Consts.geom.POLYGON;s=e.coordinates}const r={process:t.process,dataInputs:{coverageClass:e.coverageClass,geometry:{mimeType:TC.Consts.mimeType.JSON,value:TC.wrap.Geometry.toGeoJSON(n)}},responseType:TC.Consts.mimeType.JSON};if(e.crs){var i=e.crs.lastIndexOf(":");i<0&&(i=e.crs.lastIndexOf("#"));r.dataInputs.srid=e.crs.substr(i+1)}if(e.sampleNumber){const t=function(e,t){const o=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(o*o+n*n)};var a=0;s.forEach(function(e){a+=e.map(function(e,o,n){const s=n[o-1];return s?t(s,e):0}).reduce(function(e,t){return e+t},0);n.type===TC.Consts.geom.POLYGON&&(a+=t(e[e.length-1],e[0]))});r.dataInputs.splitDistance=a/e.sampleNumber}else e.resolution&&(r.dataInputs.splitDistance=e.resolution);$.ajax({url:t.url,type:"POST",contentType:TC.Consts.mimeType.XML,data:TC.format.WPS.buildExecuteQuery(r)}).then(function(e){o.resolve(e)},function(e){o.reject(e)})}):o.reject();return o.promise()};e.parseResponse=function(e){var t=this;e.coordinates&&e.coordinates.forEach(function(e){e[2]<t.minimumElevation&&(e[2]=null)});return e.coordinates||[]};e.setGeometry=function(e){const t=this;e=e||{};const o=$.Deferred(),n=e.feature;if(n){var s,r;switch(!0){case TC.feature&&TC.feature.Polygon&&n instanceof TC.feature.Polygon:s=function(e){const t=[];return t.concat.apply(t,e.geometry)};r=function(e,t){var o=0;e.geometry.forEach(function(e){e.forEach(function(n,s){e[s]=t[o++]})});e.setCoords(e.geometry)};break;case TC.feature&&TC.feature.Polyline&&n instanceof TC.feature.Polyline:s=function(e){return e.geometry};r=function(e,t){e.geometry=t;e.setCoords(e.geometry)};break;default:s=function(e){return e.geometry};r=function(e,t){e.setCoords(t[0])}}t.getElevation({crs:e.crs,coordinates:s(n),resolution:0,sampleNumber:0}).then(function(e){e.length&&e.some(function(e){return null!==e[2]})&&r(n,e);o.resolve(n)},function(e){o.reject(e)})}else o.resolve(null);return o.promise()}}();TC.tool.Elevation.getElevationGain=function(e){const t=(e=e||{}).coords;if(t&&t.length>0&&t[0].length>2){var o=0,n=0;const f=e.hillDeltaThreshold||0;for(var s,r,i,a=!0,c=0;c<t.length;c++){var u=t[c][2];if(null!==u){if(void 0===s){s=u;r=u;i=u}r=Math.min(r,u);i=Math.max(i,u);var l=u-s;if(l>f||l>0&&c==t.length-1){if(a)o+=l;else{n-=r-s;o+=u-r;a=!0}s=u;r=u;i=u}else if(l<-f||l<0&&c==t.length-1){if(a){o+=i-s;n-=u-i;a=!1}else n-=l;s=u;r=u;i=u}}}return{upHill:Math.round(o),downHill:Math.round(n)}}return null};