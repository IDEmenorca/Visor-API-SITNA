TC.control=TC.control||{};TC.control.FeatureInfoCommons||TC.syncLoadJS(TC.apiLocation+"TC/control/FeatureInfoCommons");TC.filter||TC.syncLoadJS(TC.apiLocation+"TC/Filter");!function(){TC.control.GeometryFeatureInfo=function(){TC.control.FeatureInfoCommons.apply(this,arguments);this.wrap=new TC.wrap.control.GeometryFeatureInfo(this);this.lineColor=this.options.lineColor?this.options.lineColor:"#c00";this._isDrawing=!1;this._isSearching=!1;this._drawToken=!1};TC.inherit(TC.control.GeometryFeatureInfo,TC.control.FeatureInfoCommons);var e=TC.control.GeometryFeatureInfo.prototype;e.register=function(e){var o=this;TC.control.FeatureInfoCommons.prototype.register.call(o,e);o.$events.on(TC.Consts.event.CONTROLDEACTIVATE,function(e){o.wrap.cancelDraw()})};e.callback=function(e,o){var r=this;if(!r._drawToken){r.closeResults();for(var t=!1,n=0;n<r.map.workLayers.length;n++){var a=r.map.workLayers[n];if(a.type===TC.Consts.layerType.WMS&&a.getVisibility()&&a.names.length>0){t=!0;break}}if(t){r.closeResults();r.wrap.beginDraw({geometryType:r.geometryType,xy:e,layer:r.filterLayer,callback:function(e){r.wrap.getFeaturesByGeometry(e)}})}}};e.responseCallback=function(e){var o=this;TC.control.FeatureInfoCommons.prototype.responseCallback.call(o,e);if(o.filterFeature){var r=e.services;o.info={services:r};for(var t=0;t<r.length;t++){var n=r[t];if(n.hasLimits){delete n.layers;n.hasLimits=n.hasLimits}else{for(var a=0;a<n.layers.length;a++)if(!n.layers[a].features.length){n.layers.splice(a,1);a-=1}if(!n.layers.length){r.splice(t,1);t-=1}}}r.length?o.renderData(e,function(){o.insertLinks();o.displayResults()}):o.resultsLayer.clearFeatures()}}}();